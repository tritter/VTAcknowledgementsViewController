//
// VTAcknowledgementsViewController.m
//
// Copyright (c) 2013-2021 Vincent Tourraine (http://www.vtourraine.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#import "VTAcknowledgementsViewController.h"
#import "VTAcknowledgementViewController.h"
#import "VTLocalization.h"

#if !TARGET_OS_TV
#if __has_feature(modules)
@import SafariServices;
#else
#import <SafariServices/SafariServices.h>
#endif
#endif

static NSString *const VTDefaultHeaderText = @"This application makes use of the following third party libraries:";
static NSString *const VTDefaultFooterText = @"Generated by CocoaPods - https://cocoapods.org";
static NSString *const VTCellIdentifier = @"Cell";

static const CGFloat VTLabelMargin = 20;

@interface VTAcknowledgementsViewController ()

- (instancetype)initWithCoder:(NSCoder *)coder NS_DESIGNATED_INITIALIZER;
- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil NS_DESIGNATED_INITIALIZER;

@end

@implementation VTAcknowledgementsViewController

#pragma mark - Initialization

+ (nullable NSString *)acknowledgementsPlistPathForName:(NSString *)name {
    return [[NSBundle mainBundle] pathForResource:name ofType:@"plist"];
}

+ (nullable NSString *)defaultAcknowledgementsPlistPath {
    NSString *targetName = [NSBundle mainBundle].infoDictionary[@"CFBundleName"];
    NSString *expectedPlistName = [NSString stringWithFormat:@"Pods-%@-acknowledgements", targetName];
    NSString *expectedPlistPath = [self acknowledgementsPlistPathForName:expectedPlistName];
    return expectedPlistPath;
}

+ (instancetype)acknowledgementsViewController {
    NSString *path = self.defaultAcknowledgementsPlistPath;
    return [[self.class alloc] initWithPath:path];
}

- (instancetype)initWithStyle:(UITableViewStyle)style {
    self = [self initWithAcknowledgements:@[] style:style];
    return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder {
    self = [super initWithCoder:coder];

    if (self) {
        self.title = [VTLocalization localizedTitle];
        self.acknowledgements = @[];
    }

    return self;
}

- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];

    if (self) {
        self.acknowledgements = @[];
    }

    return self;
}

- (instancetype)initWithAcknowledgements:(NSArray <VTAcknowledgement *> *)acknowledgements {
    self = [self initWithAcknowledgements:acknowledgements style:UITableViewStyleGrouped];
    return self;
}

- (instancetype)initWithAcknowledgements:(NSArray <VTAcknowledgement *> *)acknowledgements style:(UITableViewStyle)style {
    self = [super initWithStyle:style];

    if (self) {
        self.title = [VTLocalization localizedTitle];
        self.acknowledgements = acknowledgements;
    }

    return self;
}

- (instancetype)initWithPath:(NSString *)acknowledgementsPlistPath {
    self = [self initWithPath:acknowledgementsPlistPath style:UITableViewStyleGrouped];
    return self;
}

- (instancetype)initWithPath:(nullable NSString *)acknowledgementsPlistPath style:(UITableViewStyle)style {
    self = [self initWithAcknowledgements:@[] style:style];

    if (self) {
        if (acknowledgementsPlistPath) {
            [self loadFromAcknowledgementsPlistPath:acknowledgementsPlistPath];
        }
    }

    return self;
}

- (instancetype)initWithFileNamed:(nonnull NSString *)acknowledgementsFileName {
    NSString *path = [[NSBundle mainBundle] pathForResource:acknowledgementsFileName ofType:@"plist"];
    return [self initWithPath:path];
}

- (void)loadFromAcknowledgementsPlistPath:(NSString *)acknowledgementsPlistPath {
    VTParser *parser = [[VTParser alloc] initWithAcknowledgementsPlistPath:acknowledgementsPlistPath];

    if (parser.header != nil && parser.header.length > 0 && ![parser.header isEqualToString:VTDefaultHeaderText]) {
        self.headerText = parser.header;
    }

    if ([parser.footer isEqualToString:VTDefaultFooterText]) {
        self.footerText = [VTLocalization localizedCocoaPodsFooterText];
    }
    else if (![parser.footer isEqualToString:@""] && self.footerText == nil) {
        self.footerText = parser.footer;
    }

    NSMutableArray *acknowledgements = [parser.acknowledgements mutableCopy];

    if (acknowledgements) {
        [acknowledgements sortUsingComparator:^NSComparisonResult(VTAcknowledgement *obj1, VTAcknowledgement *obj2) {
            return [obj1.title compare:obj2.title options:kNilOptions range:NSMakeRange(0, obj1.title.length) locale:[NSLocale currentLocale]];
        }];

        self.acknowledgements = acknowledgements;
    }
}

#pragma mark - View life cycle

- (void)viewDidLoad {
    [super viewDidLoad];

#if TARGET_OS_TV
    self.view.layoutMargins = UIEdgeInsetsMake(60.0, 90.0, 60.0, 90.0); // Margins from tvOS HIG
#endif
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];

    if (self.headerText) {
        [self configureHeaderView];
    }

    if (self.footerText) {
        [self configureFooterView];
    }

    if (self.presentingViewController && self == [self.navigationController.viewControllers firstObject]) {
        UIBarButtonItem *doneItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(dismissViewController:)];
#if !TARGET_OS_TV
        self.navigationItem.leftBarButtonItem = doneItem;
#else
        // Add a spacer item because the leftBarButtonItem is misplaced on tvOS (doesn't obey the HIG)
        UIBarButtonItem *spacerItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
        spacerItem.width = 90.0;
        self.navigationItem.leftBarButtonItems = @[spacerItem, doneItem];
#endif
    }

    [self.tableView deselectRowAtIndexPath:self.tableView.indexPathForSelectedRow animated:animated];
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];

    if (self.acknowledgements.count == 0) {
        NSLog(@"** VTAcknowledgementsViewController Warning **");
        NSLog(@"No acknowledgements found.");
        NSLog(@"This probably means that you didn’t import the `Pods-{target}-acknowledgements.plist` to your main target.");
        NSLog(@"Please take a look at https://github.com/vtourraine/VTAcknowledgementsViewController for instructions.");
    }
}

- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator>)coordinator {
    [super viewWillTransitionToSize:size withTransitionCoordinator:coordinator];

    [coordinator animateAlongsideTransition:nil completion:^(id<UIViewControllerTransitionCoordinatorContext>  _Nonnull context) {
        if (self.headerText) {
            [self configureHeaderView];
        }

        if (self.footerText) {
            [self configureFooterView];
        }
    }];
}

- (void)awakeFromNib {
    [super awakeFromNib];

    NSString *path;
    if (self.acknowledgementsPlistName) {
        path = [self.class acknowledgementsPlistPathForName:self.acknowledgementsPlistName];
    }
    else {
        path = self.class.defaultAcknowledgementsPlistPath;
    }

    if (path) {
        [self loadFromAcknowledgementsPlistPath:path];
    }
}

#pragma mark - Configuration

- (UIFont *)headerFooterFont {
    if (self.rowFont) {
        return self.rowFont;
    }
    return [UIFont preferredFontForTextStyle:UIFontTextStyleFootnote];
}

- (UILabel *)headerFooterLabelWithText:(NSString *)text {
    UIFont *font = self.headerFooterFont;
    CGFloat width = CGRectGetWidth(self.view.frame) - 2 * VTLabelMargin;
    CGFloat height = [self heightForLabelWithText:text andWidth:width];
    CGRect frame = CGRectMake(VTLabelMargin, VTLabelMargin, width, height);

    UILabel *label = [[UILabel alloc] initWithFrame:frame];
    label.text = text;
    label.font = font;
    if (@available(iOS 13.0, tvOS 13.0, *)) {
        label.textColor = [UIColor secondaryLabelColor];
    }
    else {
        label.textColor = [UIColor grayColor];
    }
    label.numberOfLines = 0;
    label.textAlignment = NSTextAlignmentCenter;
    label.autoresizingMask = (UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin);
    if (@available(iOS 10.0, *)) {
        label.adjustsFontForContentSizeCategory = YES;
    }

    NSURL *firstLink = [VTParser firstLinkInText:text];
    if (firstLink) {
        UITapGestureRecognizer *tapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(openLink:)];
        [label addGestureRecognizer:tapGestureRecognizer];
        label.userInteractionEnabled = YES;
    }

    return label;
}

- (void)configureHeaderView {
    UILabel *label = [self headerFooterLabelWithText:self.headerText];
    CGRect headerFrame = CGRectMake(0, 0, CGRectGetWidth(self.view.frame), CGRectGetHeight(label.frame) + 2 * VTLabelMargin);
    UIView *headerView = [[UIView alloc] initWithFrame:headerFrame];
    headerView.userInteractionEnabled = label.userInteractionEnabled;
    [headerView addSubview:label];
    self.tableView.tableHeaderView = headerView;
}

- (void)configureFooterView {
    UILabel *label = [self headerFooterLabelWithText:self.footerText];
    CGFloat labelOriginY = 0;

    if (self.tableView.style == UITableViewStylePlain) {
        // “Plain” table views need additional margin between the bottom of the last row and the top of the footer label.
        labelOriginY = VTLabelMargin;
    }

    CGRect footerFrame = CGRectMake(0, 0, CGRectGetWidth(label.frame), labelOriginY + CGRectGetHeight(label.frame) + VTLabelMargin);
    UIView *footerView = [[UIView alloc] initWithFrame:footerFrame];
    footerView.userInteractionEnabled = label.userInteractionEnabled;
    [footerView addSubview:label];
    label.frame = CGRectMake(0, labelOriginY, CGRectGetWidth(label.frame), CGRectGetHeight(label.frame));
    self.tableView.tableFooterView = footerView;
}

- (CGFloat)heightForLabelWithText:(NSString *)labelText andWidth:(CGFloat)labelWidth {
    UIFont *font = self.headerFooterFont;
    CGFloat labelHeight;

    NSStringDrawingOptions options = (NSLineBreakByWordWrapping | NSStringDrawingUsesLineFragmentOrigin);
    CGRect labelBounds = [labelText boundingRectWithSize:CGSizeMake(labelWidth, CGFLOAT_MAX) options:options attributes:@{NSFontAttributeName: font} context:nil];
    labelHeight = CGRectGetHeight(labelBounds);

    return ceilf(labelHeight);
}

#pragma mark - Actions

- (void)openLink:(UIGestureRecognizer *)sender {
#if !TARGET_OS_TV
    if (![sender.view isKindOfClass:UILabel.class]) {
        return;
    }

    NSString *text = [(UILabel *)sender.view text];
    NSURL *URL = [VTParser firstLinkInText:text];

    SFSafariViewController *viewController = [[SFSafariViewController alloc] initWithURL:URL];
    [self presentViewController:viewController animated:YES completion:nil];
#endif
}

- (IBAction)dismissViewController:(id)sender {
    [self dismissViewControllerAnimated:YES completion:nil];
}

#pragma mark - Table view data source

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.acknowledgements.count;
}

- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return UITableViewAutomaticDimension;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:VTCellIdentifier];
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:VTCellIdentifier];
    }

    VTAcknowledgement *acknowledgement = self.acknowledgements[indexPath.row];
    [self configureCell:cell withAcknowledgement:acknowledgement];

    return cell;
}

- (void)configureCell:(UITableViewCell *)cell withAcknowledgement:(VTAcknowledgement *)acknowledgement {
    cell.textLabel.font = self.rowFont;
    cell.textLabel.text = acknowledgement.title;
    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
}

#pragma mark - Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    VTAcknowledgement *acknowledgement = self.acknowledgements[indexPath.row];
    VTAcknowledgementViewController *viewController = [[VTAcknowledgementViewController alloc] initWithTitle:acknowledgement.title text:acknowledgement.text font:self.licenseFont];

    [self.navigationController pushViewController:viewController animated:YES];
}

@end
